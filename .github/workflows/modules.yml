# Copyright MediaZ Teknoloji A.S. All Rights Reserved.

name: Modules

on:
  workflow_call:
    secrets:
      CI_TOKEN:
        required: true
      SENTRY_TOKEN:
        required: false
        description: 'If provided, PDBs will be uploaded to Sentry'
    inputs:
      ref_name:
        required: true
        type: string
      publish_mode:
        type: string
        description: 'Publish Mode. Options: Only Changed, All Modules, None'
        default: 'Only Changed'
      nodos_sdk_version:
        description: 'Nodos SDK Version'
        required: false
        default: ''
        type: string
      clean:
        description: 'Clean build'
        required: false
        default: false
        type: boolean
      build_number:
        description: 'Build number'
        required: false
        default: '0'
        type: string
      sign_binaries:
        description: 'Sign binaries'
        required: false
        default: false
        type: boolean
      release_notes:
        description: 'Release notes'
        required: false
        default: ''
        type: string
      last_build_tag:
        description: 'Last Build Tag'
        required: false
        default: ''
        type: string
      pre_config_command:
        description: 'Execute a command before configuration steps'
        required: false
        default: ''
        type: string
      linux:
        description: 'Release for Linux'
        required: false
        default: true
        type: boolean
      windows:
        description: 'Release for Windows'
        required: false
        default: true
        type: boolean
      run_tests:
        description: 'Run tests'
        required: false
        default: false
        type: boolean

jobs:
  prepare-strategy:
    name: Prepare Strategy
    runs-on: self-hosted
    outputs:
      runner-list: ${{ steps.prepare-step.outputs.runner-list }}
    steps:
      - name: Prepare Runner List
        id: prepare-step
        shell: bash
        run: |
          runner_list=$(python3 -c "$(wget -q -O - https://raw.githubusercontent.com/nodos-dev/actions/refs/heads/main/scripts/prep_runner_list.py)" \
            --workflow-input-linux ${{ inputs.linux }} \
            --workflow-input-windows ${{ inputs.windows }} \
            --sign ${{ inputs.sign_binaries }} \
            --ref-name ${{ inputs.ref_name }} \
            --event-name "workflow_call")
          echo Runners: $runner_list
          echo "runner-list=$runner_list" >> $GITHUB_OUTPUT

  build:
    strategy:
      matrix:
        runner: ${{ fromJson(needs.prepare-strategy.outputs.runner-list) }}
      fail-fast: false
    name: "${{ inputs.ref_name }} - ${{ inputs.build_number }} (${{ matrix.runner[0] }}) ${{ (inputs.publish_mode != 'None' && ' (Publishing)') || '' }} ${{ (inputs.publish_mode == 'None' && ' (Build Only)') || '' }}"
    needs: prepare-strategy
    runs-on: ${{ matrix.runner }}

    env:
      GH_USERNAME: "nodos-bot"
      GIT_EMAIL: "bot@nodos.dev"
      GH_TOKEN: ${{ secrets.CI_TOKEN }}
      RUST_BACKTRACE: 1

    steps:
      - name: Setup Environment Variables
        run: |
          if [ "${{ matrix.runner[0] }}" == "Linux" ]; then
            echo "SYSTEM_NOSMAN_PATH=~/Tools/nodos/nodos" >> $GITHUB_ENV
            echo "NOSMAN_EXECUTABLE_NAME=nodos" >> $GITHUB_ENV
            echo "TAG_NAME_PREFIX=build.${{ inputs.ref_name }}-linux" >> $GITHUB_ENV
          else
            echo "SYSTEM_NOSMAN_PATH=C:/Tools/nodos.exe" >> $GITHUB_ENV
            echo "NOSMAN_EXECUTABLE_NAME=nodos.exe" >> $GITHUB_ENV
            echo "TAG_NAME_PREFIX=build.${{ inputs.ref_name }}-windows" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Update Git Credentials
        continue-on-error: true
        shell: bash
        run: |
          git credential-manager github login --username ${{ env.GH_USERNAME }} --token ${{ secrets.CI_TOKEN }} --force

      - name: Clean Build
        shell: pwsh
        if: ${{ inputs.clean }}
        run: |
          if (Test-Path -Path ./modules-${{ inputs.ref_name }}) { Remove-Item -Path ./modules-${{ inputs.ref_name }} -Recurse -Force }

      - name: Setup Work Folder
        shell: pwsh
        run: |
          if (-not (Test-Path -Path ./modules-${{ inputs.ref_name }})) { New-Item -Path ./modules-${{ inputs.ref_name }} -ItemType Directory -Force }

      - name: Setup Nodos Workspace (Latest)
        if: ${{ inputs.nodos_sdk_version == '' }}
        run: |
          if (-not (Test-Path -Path ./workspace)) {
            ${{ env.SYSTEM_NOSMAN_PATH }} --workspace ./workspace get
          } else {
            cd ./workspace
            ./${{ env.NOSMAN_EXECUTABLE_NAME }} update
            cd ..
          }
        shell: pwsh
        working-directory: modules-${{ inputs.ref_name }}

      - name: Setup Nodos Workspace (Specific Version)
        if: ${{ inputs.nodos_sdk_version != '' }}
        run: |
          ${{ env.SYSTEM_NOSMAN_PATH }} --workspace ./workspace get --version "${{ inputs.nodos_sdk_version }}"
        shell: pwsh
        working-directory: modules-${{ inputs.ref_name }}

      - name: Checkout
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          if (-not (Test-Path -Path ./modules-repo)) {
            git clone --branch ${{ inputs.ref_name }} --depth 1 https://github.com/${{ github.repository }}.git --recurse-submodule --shallow-submodules ./modules-repo
          }
          cd ./modules-repo
          git fetch origin
          git fetch --tags
          git clean -ffd
          git checkout ${{ github.sha }}
          git reset --hard
          git submodule update --force --recursive --init
          git status
        working-directory: modules-${{ inputs.ref_name }}/workspace/Module

      - name: Setup Git
        run: |
          git config user.email "${{ env.GIT_EMAIL }}"
          git config user.name "${{ env.GH_USERNAME }}"
        working-directory: modules-${{ inputs.ref_name }}/workspace/Module/modules-repo
  
      - name: Update Nosman Cache
        shell: pwsh
        run: |
          ./${{ env.NOSMAN_EXECUTABLE_NAME }} rescan --fetch-index
        working-directory: modules-${{ inputs.ref_name }}/workspace

      - name: Pre-Configure
        shell: pwsh
        run: |
          ${{inputs.pre_config_command}}
        working-directory: modules-${{ inputs.ref_name }}/workspace/Module/modules-repo

      - name: Configure
        shell: pwsh
        run: |
          cmake -S ./Toolchain/CMake -B ../Project -DCMAKE_BUILD_TYPE=Release
        working-directory: modules-${{ inputs.ref_name }}/workspace

      - name: Build
        shell: pwsh
        run: |
          cmake --build ../Project --config Release -j 8
        working-directory: modules-${{ inputs.ref_name }}/workspace

      - name: Regression Tests
        shell: pwsh
        if: ${{ inputs.run_tests }}
        run: |
          $ErrorActionPreference = 'Stop'
          
          # Windows-specific firewall setup
          if ("${{ matrix.runner[0] }}" -eq "Windows") {
            $ExePath = (Get-ChildItem -Path ./Engine -Filter "nosLauncher.exe" -Recurse | Select-Object -First 1).FullName
            if ($ExePath) {
              # Remove existing rules if they exist
              Remove-NetFirewallRule -DisplayName "CI Allow Nodos Inbound" -ErrorAction SilentlyContinue
              Remove-NetFirewallRule -DisplayName "CI Allow Nodos Outbound" -ErrorAction SilentlyContinue
              
              # Create new firewall rules
              New-NetFirewallRule -DisplayName "CI Allow Nodos Inbound" -Direction Inbound -Program $ExePath -Action Allow -Profile Any -Enabled True
              New-NetFirewallRule -DisplayName "CI Allow Nodos Outbound" -Direction Outbound -Program $ExePath -Action Allow -Profile Any -Enabled True
              Write-Host "Firewall rules created for: $ExePath"
            } else {
              Write-Host "Warning: nosLauncher.exe not found in Engine directory"
            }
          }
          
          # Run tests
          Write-Host "Running regression tests..."
          ./nodos test
          
          # Cleanup firewall rules on Windows
          if ("${{ matrix.runner[0] }}" -eq "Windows") {
            Remove-NetFirewallRule -DisplayName "CI Allow Nodos Inbound" -ErrorAction SilentlyContinue
            Remove-NetFirewallRule -DisplayName "CI Allow Nodos Outbound" -ErrorAction SilentlyContinue
            Write-Host "Firewall rules cleaned up"
          }
        working-directory: modules-${{ inputs.ref_name }}/workspace

      - name: Sign Binaries
        if: ${{ inputs.publish_mode != 'None' && inputs.sign_binaries }}
        run: |
          cd $MEDIAZ_SCRIPTS_DIR
          python sign_module.py "${{ github.workspace }}/modules-${{ inputs.ref_name }}/workspace/Module/modules-repo"
        shell: bash

      - name: Upload PDBs
        if: ${{ inputs.publish_mode != 'None' && matrix.runner[0] == 'Windows'}}
        shell: pwsh
        run: |
          if ([string]::IsNullOrEmpty("${{ secrets.SENTRY_TOKEN }}")) {
            echo "SENTRY_TOKEN is not provided. Skipping PDB upload."
          } else {
            sentry-cli login --auth-token="${{ secrets.SENTRY_TOKEN }}"
            Get-ChildItem -Path . -Recurse -Filter "*.pdb" | ForEach-Object {
              sentry-cli debug-files upload -o mediaz-teknoloji -p nodos $_.FullName
            }
          }
        working-directory: modules-${{ inputs.ref_name }}/

      - name: Publish (Changed)
        if: ${{ inputs.publish_mode == 'Only Changed' }}
        shell: bash
        run: |
          if [ "${{ inputs.sign_binaries }}" == "true" ]; then
            release_notes="${{ inputs.release_notes }}
            Signed Release"
          else
            release_notes="${{ inputs.release_notes }}
            Unsigned Release"
          fi

          if [ -z "${{inputs.last_build_tag}}" ]; then
            last_build_tag=$(git for-each-ref --sort=-v:refname --format='%(refname:short)' "refs/tags/${{ env.TAG_NAME_PREFIX }}-*" | head -n 1)
          else
            last_build_tag="${{inputs.last_build_tag}}"
          fi
          echo "Last build tag is $last_build_tag"

          ../../${{ env.NOSMAN_EXECUTABLE_NAME }} \
            --workspace ../../ \
            publish-batch \
            --repo-path . \
            --compare-with="$last_build_tag" \
            --vendor Nodos \
            --version-suffix ".b${{ inputs.build_number }}" \
            --verbose \
            --publisher-name "${{ env.GH_USERNAME }}" \
            --publisher-email "${{ env.GIT_EMAIL }}" \
            --tag "${{ inputs.ref_name }}" \
            --release-notes "$release_notes" \
        working-directory: modules-${{ inputs.ref_name }}/workspace/Module/modules-repo

      - name: Publish (All)
        if: ${{ inputs.publish_mode == 'All Modules' }}
        shell: bash
        run: |
          if [ "${{ inputs.sign_binaries }}" == "true" ]; then
            release_notes="${{ inputs.release_notes }}
            Signed Release"
          else
            release_notes="${{ inputs.release_notes }}
            Unsigned Release"
          fi

          ../../${{ env.NOSMAN_EXECUTABLE_NAME }} --workspace ../../ publish-batch --repo-path . --vendor=Nodos --version-suffix ".b${{ inputs.build_number }}" --verbose --publisher-name "${{ env.GH_USERNAME }}" --publisher-email "${{ env.GIT_EMAIL }}" --tag "${{ inputs.ref_name }}" --release-notes "$release_notes" --version-check=none
        working-directory: modules-${{ inputs.ref_name }}/workspace/Module/modules-repo
      
      - name: Tag
        if: ${{ inputs.publish_mode != 'None' }}
        run: |
          git tag -a "${{ env.TAG_NAME_PREFIX }}-${{ inputs.build_number }}" -m "Build ${{ inputs.ref_name }}-${{ inputs.build_number }}"
          git push origin "${{ env.TAG_NAME_PREFIX }}-${{ inputs.build_number }}"
        working-directory: modules-${{ inputs.ref_name }}/workspace/Module/modules-repo
